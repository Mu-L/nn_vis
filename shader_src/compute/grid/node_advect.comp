#version 430

struct Node
{
    vec4 pos;
    //$$float importance_$r_class_id$;$$
    float overall_importance;
    float importance_length;
    //$$float padding_$r_nodebuffer_padding_id$;$$
};

struct DensityGrid
{
    uint overall_density;
    //$$uint density_$r_class_id$;$$
    //$$uint padding_$r_densitybuffer_padding_id$;$$
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std140, binding = 0) restrict readonly buffer node_input
{
    Node input_node[];
};
layout(std140, binding = 1) writeonly buffer node_output
{
    Node output_node[];
};
layout(std140, binding = 2) restrict readonly buffer density_grid
{
    DensityGrid density[];
};

uniform int work_group_offset;
uniform float advect_strength;
uniform float importance_similarity;

uniform ivec3 grid_cell_count;
uniform vec3 grid_cell_size;
uniform vec3 grid_bounding_min;
uniform vec3 grid_bounding_max;

ivec3 gridIndex(vec3 position)
{
    return ivec3(int(floor((position.x - grid_bounding_min.x)/grid_cell_size.x)),
        int(floor((position.y - grid_bounding_min.y)/grid_cell_size.y)),
        0);
}

vec3 gridDirection(ivec3 index, vec3 position)
{
    float x = sign((position.x - grid_bounding_min.x)/grid_cell_size.x - (float(index.x)) - 0.5);
    if (x == 0.0) x = 1.0;
    float y = sign((position.y - grid_bounding_min.y)/grid_cell_size.x - (float(index.y)) - 0.5);
    if (y == 0.0) y = 1.0;
    float z = sign((position.z - grid_bounding_min.z)/grid_cell_size.x - (float(index.z)) - 0.5);
    if (z == 0.0) z = 1.0;
    return vec3(x, y, z);
}

Node read(highp uint index)
{
    return input_node[index];
}

void write(highp uint index, vec4 pos)
{
    output_node[index].pos = pos;
}

DensityGrid readGridIndex(ivec3 index)
{
    return density[index.x + index.y * grid_cell_count.x];
}

highp float getGradientAxis(DensityGrid density_from, DensityGrid density_to, Node node)
{
    highp float drive_towards = 0.0;
    highp float drive_from = 0.0;

    highp float towards_density_overall = sqrt(0
    //$$+ density_to.density_$r_class_id$ * density_to.density_$r_class_id$ $$
    );
    highp float from_density_overall = sqrt(0
    //$$+ density_from.density_$r_class_id$ * density_from.density_$r_class_id$ $$
    );

    //$$drive_towards += (node.importance_$r_class_id$ /node.importance_length) * (density_to.density_$r_class_id$ /towards_density_overall);$$
    //$$drive_from += (node.importance_$r_class_id$/node.importance_length) * (density_from.density_$r_class_id$/from_density_overall);$$

    return float(towards_density_overall * (drive_towards - importance_similarity) - from_density_overall * (drive_from - importance_similarity));
}

vec4 getGradient(ivec3 grid_index, vec3 grid_direction, Node node)
{
    DensityGrid current_density = readGridIndex(grid_index);
    DensityGrid x_diff_density = readGridIndex(ivec3(grid_index.x + int(grid_direction.x), grid_index.y, grid_index.z));
    DensityGrid y_diff_density = readGridIndex(ivec3(grid_index.x, grid_index.y + int(grid_direction.y), grid_index.z));

    float gradient_x = getGradientAxis(current_density, x_diff_density, node) * grid_direction.x;
    float gradient_y = getGradientAxis(current_density, y_diff_density, node) * grid_direction.y;
    vec3 calc_gradient = vec3(gradient_x, gradient_y, 0.0);
    float strength = length(calc_gradient);
    return vec4(calc_gradient, strength);
}

void main() {
    highp uint index = gl_WorkGroupID.x + work_group_offset;

    Node node = read(index);
    vec4 node_data = node.pos;
    if (node_data.w == 1.0) {
        ivec3 grid_index = gridIndex(node_data.xyz);

        vec3 gradient_direction = vec3(0.0, 0.0, 0.0);
        highp float overall_strength = 0.0;

        vec4 gradient = getGradient(grid_index, gridDirection(grid_index, node_data.xyz), node);
        gradient_direction = normalize(gradient.xyz);
        overall_strength = gradient.w;

        if (overall_strength > 0.0) {
            node_data = vec4(node_data.x + gradient_direction.x * advect_strength * 0.2, node_data.y + gradient_direction.y * advect_strength * 0.2, node_data.z, node_data.w);
            float bounding_offset = abs(advect_strength) * 0.2;
            if (node_data.x < grid_bounding_min.x + bounding_offset + 2.0 * grid_cell_size.x) node_data = vec4(grid_bounding_min.x + bounding_offset + 2.0 * grid_cell_size.x, node_data.y, node_data.z, node_data.w);
            if (node_data.x > grid_bounding_max.x - bounding_offset - 2.0 * grid_cell_size.x) node_data = vec4(grid_bounding_max.x - bounding_offset - 2.0 * grid_cell_size.x, node_data.y, node_data.z, node_data.w);
            if (node_data.y < grid_bounding_min.y + bounding_offset + 2.0 * grid_cell_size.y) node_data = vec4(node_data.x, grid_bounding_min.y + bounding_offset + 2.0 * grid_cell_size.y, node_data.z, node_data.w);
            if (node_data.y > grid_bounding_max.y - bounding_offset - 2.0 * grid_cell_size.y) node_data = vec4(node_data.x, grid_bounding_max.y - bounding_offset - 2.0 * grid_cell_size.y, node_data.z, node_data.w);
        }
        write(index, node_data);
    } else {
        write(index, node_data);
    }
}
