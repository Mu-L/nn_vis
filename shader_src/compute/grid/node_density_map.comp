#version 430

struct Node
{
    vec4 pos;
    //$$float importance_$r_class_id$;$$
    float overall_importance;
    float importance_length;
    //$$float padding_$r_nodebuffer_padding_id$;$$
};

struct DensityGrid
{
    uint overall_density;
    //$$uint density_$r_class_id$;$$
    //$$uint padding_$r_densitybuffer_padding_id$;$$
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std140, binding = 0) restrict readonly buffer node_input
{
    Node input_node[];
};

layout(std140, binding = 2) coherent buffer prev_density_grid
{
    DensityGrid prev_grid[];
};

layout(std140, binding = 3) coherent buffer density_grid
{
    DensityGrid grid[];
};

layout(std140, binding = 4) coherent buffer next_density_grid
{
    DensityGrid next_grid[];
};

uniform int work_group_offset;
uniform int max_sample_points;

uniform float density_strength;
uniform float bandwidth;
uniform int density_clamp;

uniform ivec3 grid_cell_count;
uniform vec3 grid_cell_size;
uniform vec3 grid_bounding_min;

const float cell_scale = 1.36602540378;

Node read(highp uint index)
{
    return input_node[index];
}

ivec3 gridIndex(vec3 position)
{
    return ivec3(int(floor((position.x - grid_bounding_min.x)/grid_cell_size.x)),
    int(floor((position.y - grid_bounding_min.y)/grid_cell_size.y)),
    0);
}

vec3 gridPosition(ivec3 gridIndex)
{
    return vec3(((float(gridIndex.x) + 0.5) * grid_cell_size.x + grid_bounding_min.x),
    ((float(gridIndex.y) + 0.5) * grid_cell_size.y + grid_bounding_min.y),
    0.0);
}

highp float density_estimation(vec3 position, float cell_length, vec3 center)
{
    highp float value = 0.0;
    vec3 direction = normalize(center - position);
    float start_distance = length(center - position + direction * cell_length);
    float end_distance = length(center - position - direction * cell_length);
    if (start_distance < bandwidth || end_distance < bandwidth)
    {
        float cross_center = dot(center - (position + direction * cell_length), center - (position - direction * cell_length));
        if (start_distance > bandwidth) start_distance = bandwidth;
        if (end_distance > bandwidth) end_distance = bandwidth;
        start_distance = start_distance / bandwidth;
        end_distance = end_distance / bandwidth;
        if (cross_center < 0) start_distance = -start_distance;

        value = abs((end_distance - end_distance * end_distance * end_distance/3.0)
        - (start_distance - start_distance * start_distance * start_distance/3.0));
    }
    return value;
}

void apply_density(Node node, highp int index, float scale) {
    atomicAdd(prev_grid[index].overall_density, int(scale * node.overall_importance));
    //$$atomicAdd(prev_grid[index].density_$r_class_id$, int(scale * node.importance_$r_class_id$));$$
}

void main() {
    highp uint index = gl_WorkGroupID.x + work_group_offset;

    ivec3 convolution_range = ivec3(ceil(bandwidth/grid_cell_size.x) + 1, ceil(bandwidth/grid_cell_size.y) + 1, ceil(bandwidth/grid_cell_size.z) + 1);
    Node node = read(index);
    vec3 node_data = vec3(node.pos.x, node.pos.y, 0);

    ivec3 nodeGridIndex = gridIndex(node_data);
    for (int ix = -convolution_range.x; ix <= convolution_range.x + 1; ix++)
    {
        for (int iy = -convolution_range.y; iy <= convolution_range.y + 1; iy++)
        {
            ivec3 grid_index = ivec3(nodeGridIndex.x + ix, nodeGridIndex.y + iy, 0);
            if (grid_index.x >= 0 && grid_index.y >= 0 && grid_index.z >= 0 && grid_index.x < grid_cell_count.x && grid_index.y < grid_cell_count.y && grid_index.z < grid_cell_count.z)
            {
                vec3 grid_position = gridPosition(grid_index);
                highp float value = density_estimation(grid_position, grid_cell_size.x * cell_scale, node_data);
                if (value * density_strength >= 1.0)
                {
                    highp int index = (grid_index.x + grid_index.y * grid_cell_count.x);
                    apply_density(node, index, value * density_strength);
                }
            }
        }
    }
}
