#version 430

struct SamplePoint
{
    vec4 pos;
};

struct DensityGrid
{
    uint overall_density;
    //$$uint density_$r_class_id$;$$
    //$$uint padding_$r_densitybuffer_padding_id$;$$
};

struct EdgeData
{
    float samples;
    float layer_id;
    float layer_edge_id;
    float importance;
    float start_importance_length;
    float end_importance_length;
    float start_importance;
    float end_importance;
    //$$float start_importance_$r_class_id$;$$
    //$$float end_importance_$r_class_id$;$$
    //$$float padding_$r_edgebuffer_padding_id$;$$
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};

layout(std140, binding = 1) writeonly buffer sample_output
{
    SamplePoint output_sample[];
};

layout(std140, binding = 2) restrict readonly buffer edge_data
{
    EdgeData edge[];
};

layout(std140, binding = 3) restrict readonly buffer density_grid
{
    DensityGrid density[];
};

uniform int work_group_offset;
uniform int max_sample_points;
uniform int slice_count;
uniform int slice_size;
uniform int current_buffer;
uniform float grid_layer_offset;

uniform float advect_strength;
uniform float importance_similarity = 0.8;
uniform int edge_importance_type = 0;

uniform ivec3 grid_cell_count;
uniform vec3 grid_cell_size;
uniform vec3 grid_bounding_min;

EdgeData current_edge;
//$float importance[$num_classes$];
float overall_importance;

ivec3 gridIndex(vec3 position)
{
    return ivec3(int(floor((position.x - grid_bounding_min.x)/grid_cell_size.x)),
    int(floor((position.y - grid_bounding_min.y)/grid_cell_size.y)),
    int(floor((position.z - (grid_bounding_min.z + grid_layer_offset))/grid_cell_size.z)));
}

vec3 gridDirection(ivec3 index, vec3 position)
{
    float x = sign((position.x - grid_bounding_min.x)/grid_cell_size.x - (float(index.x)) - 0.5);
    if (x == 0.0) x = 1.0;
    float y = sign((position.y - grid_bounding_min.y)/grid_cell_size.x - (float(index.y)) - 0.5);
    if (y == 0.0) y = 1.0;
    float z = sign((position.z - (grid_bounding_min.z + grid_layer_offset))/grid_cell_size.x - (float(index.z)) - 0.5);
    if (z == 0.0) z = 1.0;
    return vec3(x, y, z);
}

vec4 read(highp uint index)
{
    return input_sample[index].pos;
}

EdgeData readEdge(highp uint index)
{
    return edge[int(floor(index/max_sample_points))];
}

void write(highp uint index, vec4 pos)
{
    output_sample[index].pos = pos;
}

DensityGrid readGridIndex(ivec3 index)
{
    highp int original_index = index.x + index.y * grid_cell_count.x + index.z * grid_cell_count.x * grid_cell_count.y;
    return density[original_index - current_buffer * slice_count * slice_size];
}

highp float getGradientAxis(DensityGrid density_from, DensityGrid density_to)
{
    highp float drive_towards = 0.0;
    highp float drive_from = 0.0;

    highp float towards_density_overall = sqrt(0
    //$$+ density_to.density_$r_class_id$ * density_to.density_$r_class_id$ $$
    );
    highp float from_density_overall = sqrt(0
    //$$+ density_from.density_$r_class_id$ * density_from.density_$r_class_id$ $$
    );

    //$$drive_towards += importance[$r_class_id$] * (density_to.density_$r_class_id$/towards_density_overall);$$
    //$$drive_from += importance[$r_class_id$] * (density_from.density_$r_class_id$/from_density_overall);$$

    return float(towards_density_overall * (drive_towards - importance_similarity) - from_density_overall * (drive_from - importance_similarity));
}

vec4 getGradient(ivec3 grid_index, vec3 grid_direction)
{
    DensityGrid current_density = readGridIndex(grid_index);
    DensityGrid x_diff_density = readGridIndex(ivec3(grid_index.x + int(grid_direction.x), grid_index.y, grid_index.z));
    DensityGrid y_diff_density = readGridIndex(ivec3(grid_index.x, grid_index.y + int(grid_direction.y), grid_index.z));
    DensityGrid z_diff_density = readGridIndex(ivec3(grid_index.x, grid_index.y, grid_index.z + int(grid_direction.z)));

    float gradient_x = getGradientAxis(current_density, x_diff_density) * grid_direction.x;
    float gradient_y = getGradientAxis(current_density, y_diff_density) * grid_direction.y;
    float gradient_z = getGradientAxis(current_density, z_diff_density) * grid_direction.z;
    vec3 calc_gradient = vec3(gradient_x, gradient_y, gradient_z);
    float strength = length(calc_gradient);
    return vec4(calc_gradient, strength);
}

void main() {
    highp uint index = gl_WorkGroupID.x + work_group_offset;

    vec4 sample_data = read(index);
    if (sample_data.w == 1.0) {
        current_edge = readEdge(index);
        if (edge_importance_type == 0) {
            float t = mod(index, max_sample_points)/current_edge.samples;
            //$$importance[$r_class_id$] = (1.0 - t) * current_edge.start_importance_$r_class_id$/current_edge.start_importance_length + t * current_edge.end_importance_$r_class_id$/current_edge.end_importance_length;$$
            overall_importance = ((1.0 - t) * current_edge.start_importance + t * current_edge.end_importance) * current_edge.importance;
        }
        if (edge_importance_type == 1) {
            //$$importance[$r_class_id$] = current_edge.start_importance_$r_class_id$/current_edge.start_importance_length;$$
            overall_importance = current_edge.start_importance * current_edge.importance;
        }
        if (edge_importance_type == 2) {
            highp float divisor = current_edge.start_importance_length + current_edge.end_importance_length;
            //$$importance[$r_class_id$] = (current_edge.start_importance_$r_class_id$ + current_edge.end_importance_$r_class_id$)/divisor;$$
            overall_importance = (current_edge.start_importance + current_edge.end_importance) * current_edge.importance;
        }
        if (edge_importance_type == 3) {
            //$$importance[$r_class_id$] = current_edge.end_importance_$r_class_id$/current_edge.end_importance_length;$$
            overall_importance = current_edge.end_importance * current_edge.importance;
        }

        ivec3 grid_index = gridIndex(sample_data.xyz);
        if (grid_index.z >= current_buffer * slice_count && grid_index.z < (current_buffer + 1) * slice_count)
        {
            vec3 gradient_direction = vec3(0.0, 0.0, 0.0);
            highp float overall_strength = 0.0;

            vec4 gradient = getGradient(grid_index, gridDirection(grid_index, sample_data.xyz));
            gradient_direction = normalize(gradient.xyz);
            overall_strength = gradient.w;

            if (overall_strength >= 0.0) {
                sample_data = vec4(sample_data.x + gradient_direction.x * advect_strength, sample_data.y + gradient_direction.y * advect_strength, sample_data.z + gradient_direction.z * advect_strength, sample_data.w);
            }
            write(index, sample_data);
        }
    } else {
        write(index, sample_data);
    }
}
