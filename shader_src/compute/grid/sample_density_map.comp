#version 430

struct SamplePoint
{
    vec4 pos;
};

struct DensityGrid
{
    uint overall_density;
    //$$uint density_$r_class_id$;$$
    //$$uint padding_$r_densitybuffer_padding_id$;$$
};

struct EdgeData
{
    float samples;
    float layer_id;
    float layer_edge_id;
    float importance;
    float start_importance_length;
    float end_importance_length;
    float start_importance;
    float end_importance;
    //$$float start_importance_$r_class_id$;$$
    //$$float end_importance_$r_class_id$;$$
    //$$float padding_$r_edgebuffer_padding_id$;$$
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std140, binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};

layout(std140, binding = 2) restrict readonly buffer edge_data
{
    EdgeData edge[];
};

layout(std140, binding = 3) coherent buffer prev_density_grid
{
    DensityGrid prev_grid[];
};

layout(std140, binding = 4) coherent buffer density_grid
{
    DensityGrid grid[];
};

layout(std140, binding = 5) coherent buffer next_density_grid
{
    DensityGrid next_grid[];
};

uniform int work_group_offset;
uniform int max_sample_points;
uniform int slice_size;
uniform int slice_count;
uniform int current_buffer;
uniform float grid_layer_offset;

uniform float density_strength;
uniform float bandwidth;
uniform int edge_importance_type = 0;

uniform ivec3 grid_cell_count;
uniform vec3 grid_cell_size;
uniform vec3 grid_bounding_min;

const float cell_scale = 1.36602540378;

EdgeData current_edge;
//$float importance[$num_classes$];
float overall_importance;

vec4 read(highp uint index)
{
    return input_sample[index].pos;
}

EdgeData readEdge(highp uint index)
{
    return edge[int(floor(index/max_sample_points))];
}

ivec3 gridIndex(vec3 position)
{
    return ivec3(int(floor((position.x - grid_bounding_min.x)/grid_cell_size.x)),
    int(floor((position.y - grid_bounding_min.y)/grid_cell_size.y)),
    int(floor((position.z - (grid_bounding_min.z + grid_layer_offset))/grid_cell_size.z)));
}

vec3 gridPosition(ivec3 gridIndex)
{
    return vec3(((float(gridIndex.x) + 0.5) * grid_cell_size.x + grid_bounding_min.x),
    ((float(gridIndex.y) + 0.5) * grid_cell_size.y + grid_bounding_min.y),
    ((float(gridIndex.z) + 0.5) * grid_cell_size.z + grid_bounding_min.z + grid_layer_offset));
}

highp float density_estimation(vec3 position, float cell_length, vec3 center, vec3 point_a, vec3 point_b, float min_distance)
{
    highp float value = 0.0;
    vec3 direction = normalize(center - position);
    float start_dis_a = length(point_a - position + direction * cell_length);
    float start_dis_b = length(point_b - position + direction * cell_length);
    float end_dis_a = length(point_a - position - direction * cell_length);
    float end_dis_b = length(point_b - position - direction * cell_length);
    float start_distance = start_dis_a + start_dis_b - min_distance;
    float end_distance = end_dis_a + end_dis_b - min_distance;
    if (start_distance < bandwidth || end_distance < bandwidth)
    {
        float cross_center = dot(center - (position + direction * cell_length), center - (position - direction * cell_length));
        if (start_distance > bandwidth) start_distance = bandwidth;
        if (end_distance > bandwidth) end_distance = bandwidth;
        start_distance = start_distance / bandwidth;
        end_distance = end_distance / bandwidth;
        if (cross_center < 0) start_distance = -start_distance;

        value = abs((end_distance - end_distance * end_distance * end_distance/3.0)
        - (start_distance - start_distance * start_distance * start_distance/3.0));
    }
    return value;
}

void apply_density(EdgeData current_edge, highp int index, float scale) {
    atomicAdd(grid[index].overall_density, int(scale * overall_importance));
    //$$atomicAdd(grid[index].density_$r_class_id$, int(scale * importance[$r_class_id$]));$$
}

void apply_density_prev(EdgeData current_edge, highp int index, float scale) {
    atomicAdd(prev_grid[index].overall_density, int(scale * overall_importance));
    //$$atomicAdd(prev_grid[index].density_$r_class_id$, int(scale * importance[$r_class_id$]));$$
}

void apply_density_next(EdgeData current_edge, highp int index, float scale) {
    atomicAdd(next_grid[index].overall_density, int(scale * overall_importance));
    //$$atomicAdd(next_grid[index].density_$r_class_id$, int(scale * importance[$r_class_id$]));$$
}

void main() {
    highp uint index = gl_WorkGroupID.x + work_group_offset;
    ivec3 convolution_range = ivec3(ceil(bandwidth/grid_cell_size.x) + 1, ceil(bandwidth/grid_cell_size.y) + 1, ceil(bandwidth/grid_cell_size.z) + 1);
    vec4 pointA = read(index);
    vec4 pointB = read(index + 1);

    if (pointA.w >= 1.0) {
        current_edge = readEdge(index);
        if (edge_importance_type == 0) {
            float t = mod(index, max_sample_points)/current_edge.samples;
            //$$importance[$r_class_id$] = (1.0 - t) * current_edge.start_importance_$r_class_id$/current_edge.start_importance_length + t * current_edge.end_importance_$r_class_id$/current_edge.end_importance_length;$$
            overall_importance = ((1.0 - t) * current_edge.start_importance + t * current_edge.end_importance) * current_edge.importance;
        }
        if (edge_importance_type == 1) {
            //$$importance[$r_class_id$] = current_edge.start_importance_$r_class_id$/current_edge.start_importance_length;$$
            overall_importance = current_edge.start_importance * current_edge.importance;
        }
        if (edge_importance_type == 2) {
            highp float divisor = current_edge.start_importance_length + current_edge.end_importance_length;
            //$$importance[$r_class_id$] = (current_edge.start_importance_$r_class_id$ + current_edge.end_importance_$r_class_id$)/divisor;$$
            overall_importance = (current_edge.start_importance + current_edge.end_importance) * current_edge.importance;
        }
        if (edge_importance_type == 3) {
            //$$importance[$r_class_id$] = current_edge.end_importance_$r_class_id$/current_edge.end_importance_length;$$
            overall_importance = current_edge.end_importance * current_edge.importance;
        }

        highp float disMin = length(pointA.xyz - pointB.xyz);
        vec3 midPoint = (pointA.xyz + pointB.xyz)/2.0;
        ivec3 midIndex = gridIndex(midPoint);
        highp float min_distance = distance(pointA.xyz, pointB.xyz);
        if (midIndex.z >= current_buffer * slice_count && midIndex.z < (current_buffer + 1) * slice_count) {
            for (int ix = -convolution_range.x; ix <= convolution_range.x + 1; ix++)
            {
                for (int iy = -convolution_range.y; iy <= convolution_range.y + 1; iy++)
                {
                    for (int iz = -convolution_range.z; iz <= convolution_range.z + 1; iz++)
                    {
                        ivec3 grid_index = ivec3(midIndex.x + ix, midIndex.y + iy, midIndex.z + iz);
                        if (grid_index.x >= 0 && grid_index.y >= 0 && grid_index.z >= 0 && grid_index.x < grid_cell_count.x && grid_index.y < grid_cell_count.y && grid_index.z < grid_cell_count.z)
                        {
                            vec3 grid_position = gridPosition(grid_index);
                            highp float value = density_estimation(grid_position, grid_cell_size.x * cell_scale, midPoint, pointA.xyz, pointB.xyz, min_distance);
                            if (value * density_strength >= 1.0)
                            {
                                highp int index = (grid_index.x + grid_index.y * grid_cell_count.x + grid_index.z * grid_cell_count.y * grid_cell_count.x);
                                highp int relative_index = index - current_buffer * slice_count * slice_size;

                                if (relative_index < 0)
                                {
                                    apply_density_prev(current_edge, relative_index + slice_count * slice_size, value * density_strength);
                                } else {
                                    if (relative_index > slice_count * slice_size)
                                    {
                                        apply_density_next(current_edge, relative_index - slice_count * slice_size, value * density_strength);
                                        if (relative_index < (slice_count + 1) * slice_size)
                                        {
                                            apply_density(current_edge, relative_index, value * density_strength);
                                        }
                                    } else {
                                        if (relative_index < slice_size) {
                                            apply_density_prev(current_edge, relative_index + slice_count * slice_size, value * density_strength);
                                        }
                                        apply_density(current_edge, relative_index, value * density_strength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
