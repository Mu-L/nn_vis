#version 430

struct SamplePoint
{
    vec4 pos;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};
layout(binding = 1) restrict writeonly buffer sample_output
{
    SamplePoint output_sample[];
};

uniform int work_group_offset;

vec4 read(highp uint index)
{
    return input_sample[index].pos;
}

void write(highp uint index, vec4 pos)
{
    output_sample[index].pos = pos;
}

uniform int max_sample_points;
uniform float sample_length;
uniform float bandwidth_reduction = 1.0;
const int smoothing_radius = 8;

void main() {
    highp uint index = gl_WorkGroupID.x + work_group_offset;

    float sample_count = read(index - (index % max_sample_points)).w;

    if (index % max_sample_points <= sample_count) {
        vec4 sample_data = read(index);
        if (sample_data.w == 1.0) {
            vec3 new_sample = vec3(0.0, 0.0, 0.0);
            bool reached_end = false;
            int relative_smoothing_radius = int(max((sample_count * float(smoothing_radius) * bandwidth_reduction)/100.0, 1.0));
            int neigbour_count = 0;
            for (int i = -relative_smoothing_radius; i <= relative_smoothing_radius; i++)
            {
                vec4 neighbour_point = read(index + i);
                if (neighbour_point.w > 1.0 && i < 0.0) {
                    new_sample = neighbour_point.xyz;
                    neigbour_count = 1;
                }
                if (neighbour_point.w < 0.0 && i > 0.0 && !reached_end) {
                    new_sample += neighbour_point.xyz;
                    reached_end = true;
                    neigbour_count += 1;
                }
                if (neighbour_point.w == 1.0 && !reached_end) {
                    new_sample += neighbour_point.xyz;
                    neigbour_count += 1;
                }
            }
            write(index, vec4(new_sample/float(neigbour_count), 1.0));
        } else {
            write(index, sample_data);
        }
    }
}
