#version 430

struct SamplePoint
{
    vec4 pos;
};

struct EdgeData
{
    float samples;
    float layer_id;
    float layer_edge_id;
    float importance;
    float start_importance_length;
    float end_importance_length;
    float start_importance;
    float end_importance;
    //$$float start_importance_$r_class_id$;$$
    //$$float end_importance_$r_class_id$;$$
    //$$float padding_$r_edgebuffer_padding_id$;$$
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0) readonly buffer sample_input
{
    SamplePoint input_sample[];
};
layout(std430, binding = 2) writeonly buffer edge_data
{
    EdgeData edge[];
};

uniform int work_group_offset;
uniform int max_sample_points;

vec4 read(highp uint index, highp uint offset)
{
    return input_sample[index + offset].pos;
}

void main() {
    highp uint offset = (gl_WorkGroupID.x + work_group_offset) * max_sample_points;
    vec4 first_point = read(0, offset);
    int index = int(gl_WorkGroupID.x) + work_group_offset;
    edge[index].samples = first_point.w;
}
