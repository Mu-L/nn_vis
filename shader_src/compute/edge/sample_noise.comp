#version 430

struct SamplePoint
{
    vec4 pos;
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(binding = 0) restrict readonly buffer sample_input
{
    SamplePoint input_sample[];
};
layout(binding = 1) restrict writeonly buffer sample_output
{
    SamplePoint output_sample[];
};

uniform int work_group_offset;
uniform int max_sample_points;
uniform float sample_length;
uniform float noise_strength;
uniform int move_start_end;

highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy, vec2(a, b));
    highp float sn= mod(dt, 3.14);
    return fract(sin(sn) * c);
}

vec4 read(highp uint index, highp uint offset)
{
    return input_sample[index + offset].pos;
}

void write(highp uint index, highp uint offset, vec4 pos)
{
    output_sample[index + offset].pos = pos;
}

void main() {
    highp uint offset = (gl_WorkGroupID.x + work_group_offset) * max_sample_points;
    highp uint current_read_index = 0;
    highp uint current_write_index = 0;

    if (move_start_end == 0) {
        vec4 next_point = read(current_read_index++, offset);
        write(current_write_index++, offset, next_point);
    }

    float is_used = 1.0;
    while (is_used >= 1.0)
    {
        vec4 next_point = read(current_read_index++, offset);
        is_used = next_point.w;
        if (is_used >= 1.0 || move_start_end > 0)
        {
            highp float noise_x = (rand(next_point.xy) - 0.5) * 2.0 * noise_strength * sample_length;
            highp float noise_y = (rand(next_point.yz) - 0.5) * 2.0 * noise_strength * sample_length;
            highp float noise_z = (rand(next_point.zx) - 0.5) * 2.0 * noise_strength * sample_length - 0.0001;
            next_point = vec4(next_point.x + noise_x, next_point.y + noise_y, next_point.z + noise_z, next_point.w);
        }
        write(current_write_index++, offset, next_point);
    };
}
